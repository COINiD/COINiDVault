#!/usr/bin/env node
const { execSync } = require('child_process');

const rootDir = `${__dirname}/..`;

let platforms = ['android'];
const [, , prefix, selPlatform] = process.argv;

if (selPlatform) {
  platforms = platforms.filter(e => e === selPlatform);
}

let time = new Date()
  .toISOString()
  .replace(/\D/g, '')
  .substr(0, 12);
if (prefix !== undefined) {
  time = prefix + time;
}

const getTag = () => {
  try {
    return execSync(`cd ${rootDir}; git describe --tags`, {
      stdio: ['ignore', 'pipe', 'ignore'],
      encoding: 'utf8',
    }).slice(0, -1);
  } catch (err) {
    return '';
  }
};

const tag = getTag();

if (tag) {
  console.log('Found tag ' + tag);
}

const runTests = () => {
  try {
    execSync(`cd ${rootDir}; yarn test`, { stdio: 'inherit' });
  } catch (err) {
    return false;
  }
  return true;
};

const doBuilds = platform => {
  execSync(
    `cd ${rootDir}/${platform}; fastlane beta time:${time} tag:${tag} package_name:org.coinid.vault`,
    {
      stdio: 'inherit',
    },
  );
};

const createSHA256SUMS = dir => {
  execSync(
    `
    cd ${rootDir}/builds/vault/${dir};
    shasum -a256 *.apk > SHA256SUMS;
    gpg --yes --digest-algo sha256 --clearsign SHA256SUMS;
    rm SHA256SUMS;
  `,
    { stdio: 'inherit' },
  );
};

const pause = text => {
  execSync(
    `
    read -p "${text}" nothing;
  `,
    { stdio: 'inherit' },
  );
};

if (runTests()) {
  platforms.forEach(platform => doBuilds(platform));

  if (platforms.includes('android')) {
    pause('Prepare to sign builds... Press enter to continue.');

    createSHA256SUMS(time);
    createSHA256SUMS('latest');

    if (tag) {
      createSHA256SUMS(`release-${tag}`);
    }
  }
} else {
  console.log('Tests failed!');
}
